#!/usr/bin/env bash
#
# Library that allows 3D objects to be created, translated, and rotated.
#
# Author: Ponali <ponali2k@gmail.com>
# Date: August 27, 2025
# License: MIT

tf=$(type -t draw_triangles 2>/dev/null || rt=$?)
if [[ "$tf" != "function" ]]; then
    . ./lib/triangles || exit
fi

triangle_x=()
triangle_y=()
triangle_z=()
triangle_color1=()
triangle_color2=()
triangle_color3=()
triangle_count=0

# Solid means that the triangle only has one color throughout all the points.
# For multiple colors, use functions that end with "gradient", or that simply don't contain "solid".

# Makes a triangle with one singular color.
# Usage: add_triangle_solid [p1] [p2] [p3] [color]
add_triangle_solid() {
    local x1=$1
    local y1=$2
    local z1=$3
    local x2=$4
    local y2=$5
    local z2=$6
    local x3=$7
    local y3=$8
    local z3=$9
    local r=${10}
    local g=${11}
    local b=${12}

    triangle_x+=($x1 $x2 $x3)
    triangle_y+=($y1 $y2 $y3)
    triangle_z+=($z1 $z2 $z3)
    triangle_color1+=($r $g $b)
    triangle_color2+=($r $g $b)
    triangle_color3+=($r $g $b)

    ((triangle_count++))

    debug "add triangle $x1,$y1,$z1 $x2,$y2,$z2 $x3,$y3,$z3"
}

# Makes a triangle with three colors.
# Usage: add_triangle_gradient [p1] [p2] [p3] [color1] [color2] [color3]
add_triangle_gradient() {
    local x1=$1
    local y1=$2
    local z1=$3
    local x2=$4
    local y2=$5
    local z2=$6
    local x3=$7
    local y3=$8
    local z3=$9
    local r1=${10}
    local g1=${11}
    local b1=${12}
    local r2=${13}
    local g2=${14}
    local b2=${15}
    local r3=${16}
    local g3=${17}
    local b3=${18}

    triangle_x+=($x1 $x2 $x3)
    triangle_y+=($y1 $y2 $y3)
    triangle_z+=($z1 $z2 $z3)
    triangle_color1+=($r1 $g1 $b1)
    triangle_color2+=($r2 $g2 $b2)
    triangle_color3+=($r3 $g3 $b3)

    ((triangle_count++))

    debug "add triangle $x1,$y1,$z1 $x2,$y2,$z2 $x3,$y3,$z3"
}

# Makes a quadrilateral with one singular color.
# Usage: add_quad_solid [p1] [p2] [p3] [p4] [color]
add_quad_solid() {
    local x1=$1
    local y1=$2
    local z1=$3
    local x2=$4
    local y2=$5
    local z2=$6
    local x3=$7
    local y3=$8
    local z3=$9
    local x4=${10}
    local y4=${11}
    local z4=${12}
    local r=${13}
    local g=${14}
    local b=${15}

    add_triangle_solid \
        $x1 $y1 $z1 \
        $x2 $y2 $z2 \
        $x3 $y3 $z3 \
        $r $g $b
    add_triangle_solid \
        $x3 $y3 $z3 \
        $x4 $y4 $z4 \
        $x1 $y1 $z1 \
        $r $g $b
}

# Makes a quadrilateral with four colors.
# Usage: add_quad_gradient [p1] [p2] [p3] [p4] [color1] [color2] [color3] [color4]
add_quad_gradient() {
    local x1=$1
    local y1=$2
    local z1=$3
    local x2=$4
    local y2=$5
    local z2=$6
    local x3=$7
    local y3=$8
    local z3=$9
    local x4=${10}
    local y4=${11}
    local z4=${12}
    local r1=${13}
    local g1=${14}
    local b1=${15}
    local r2=${16}
    local g2=${17}
    local b2=${18}
    local r3=${19}
    local g3=${20}
    local b3=${21}
    local r4=${22}
    local g4=${23}
    local b4=${24}

    add_triangle_gradient \
        $x1 $y1 $z1 \
        $x2 $y2 $z2 \
        $x3 $y3 $z3 \
        $r1 $g1 $b1 \
        $r2 $g2 $b2 \
        $r3 $g3 $b3
    add_triangle_gradient \
        $x3 $y3 $z3 \
        $x4 $y4 $z4 \
        $x1 $y1 $z1 \
        $r3 $g3 $b3 \
        $r4 $g4 $b4 \
        $r1 $g1 $b1
}

# Trigonometry functions (sin and cos)
euclidean_mod() {
    local dividend=$1
    local divisor=$2

    if [ "$divisor" -eq 0 ]; then
        echo 0
    fi

    local res=$(( (dividend % divisor + divisor) % divisor ))
    echo "$res"
}

# i WISH bash had a builtin sin function instead of having to do this shitty approach
# thanks to https://www.daycounter.com/Calculators/Sine-Generator-Calculator.phtml anyway
sine_table=(32768 32969 33170 33371 33572 33774 33975 34176 34377 34578 34779 34980 35180 35381 35582 35782
35982 36183 36383 36583 36782 36982 37182 37381 37580 37779 37978 38177 38375 38573 38771 38969
39166 39364 39561 39757 39954 40150 40346 40542 40737 40932 41127 41321 41515 41709 41903 42096
42288 42481 42673 42864 43056 43247 43437 43627 43817 44006 44195 44383 44571 44759 44946 45133
45319 45504 45690 45874 46058 46242 46425 46608 46790 46972 47153 47333 47513 47693 47872 48050
48228 48405 48582 48758 48933 49108 49282 49455 49628 49800 49972 50143 50313 50483 50652 50820
50988 51155 51321 51487 51651 51815 51979 52142 52303 52465 52625 52785 52944 53102 53259 53416
53572 53727 53881 54035 54188 54339 54491 54641 54790 54939 55087 55234 55380 55525 55669 55813
55955 56097 56238 56378 56517 56655 56793 56929 57065 57199 57333 57466 57597 57728 57858 57987
58115 58242 58368 58493 58618 58741 58863 58984 59104 59224 59342 59459 59575 59691 59805 59918
60030 60141 60251 60360 60468 60575 60681 60786 60890 60993 61095 61195 61295 61393 61491 61587
61682 61776 61869 61961 62052 62142 62230 62318 62404 62490 62574 62657 62739 62820 62899 62978
63055 63131 63206 63280 63353 63425 63495 63565 63633 63700 63766 63830 63894 63956 64017 64077
64136 64193 64250 64305 64359 64412 64464 64514 64563 64611 64658 64704 64748 64791 64834 64874
64914 64952 64990 65025 65060 65094 65126 65157 65187 65216 65243 65269 65294 65318 65340 65362
65382 65401 65418 65435 65450 65464 65476 65488 65498 65507 65515 65521 65526 65530 65533 65535
65535 65534 65532 65528 65524 65518 65511 65503 65493 65482 65470 65457 65442 65427 65410 65391
65372 65351 65329 65306 65282 65256 65230 65201 65172 65142 65110 65077 65043 65008 64971 64933
64894 64854 64813 64770 64726 64681 64635 64587 64539 64489 64438 64386 64332 64278 64222 64165
64107 64047 63987 63925 63862 63798 63733 63666 63599 63530 63460 63389 63317 63244 63169 63093
63017 62939 62860 62779 62698 62616 62532 62447 62361 62274 62186 62097 62007 61915 61823 61729
61635 61539 61442 61344 61245 61145 61044 60942 60838 60734 60629 60522 60415 60306 60196 60086
59974 59862 59748 59633 59517 59401 59283 59164 59044 58924 58802 58679 58556 58431 58305 58179
58051 57923 57793 57663 57532 57399 57266 57132 56997 56861 56724 56586 56448 56308 56168 56026
55884 55741 55597 55452 55307 55160 55013 54865 54716 54566 54415 54264 54111 53958 53804 53650
53494 53338 53181 53023 52864 52705 52545 52384 52223 52060 51897 51734 51569 51404 51238 51071
50904 50736 50568 50398 50228 50058 49886 49714 49542 49369 49195 49020 48845 48670 48493 48317
48139 47961 47782 47603 47424 47243 47062 46881 46699 46517 46334 46150 45966 45782 45597 45412
45226 45039 44852 44665 44477 44289 44101 43912 43722 43532 43342 43151 42960 42769 42577 42385
42192 41999 41806 41612 41418 41224 41029 40835 40639 40444 40248 40052 39856 39659 39462 39265
39068 38870 38672 38474 38276 38077 37879 37680 37481 37281 37082 36882 36683 36483 36283 36083
35882 35682 35481 35281 35080 34879 34678 34477 34276 34075 33874 33673 33472 33271 33069 32868
32667 32466 32264 32063 31862 31661 31460 31259 31058 30857 30656 30455 30254 30054 29853 29653
29452 29252 29052 28852 28653 28453 28254 28054 27855 27656 27458 27259 27061 26863 26665 26467
26270 26073 25876 25679 25483 25287 25091 24896 24700 24506 24311 24117 23923 23729 23536 23343
23150 22958 22766 22575 22384 22193 22003 21813 21623 21434 21246 21058 20870 20683 20496 20309
20123 19938 19753 19569 19385 19201 19018 18836 18654 18473 18292 18111 17932 17753 17574 17396
17218 17042 16865 16690 16515 16340 16166 15993 15821 15649 15477 15307 15137 14967 14799 14631
14464 14297 14131 13966 13801 13638 13475 13312 13151 12990 12830 12671 12512 12354 12197 12041
11885 11731 11577 11424 11271 11120 10969 10819 10670 10522 10375 10228 10083 9938 9794 9651
9509 9367 9227 9087 8949 8811 8674 8538 8403 8269 8136 8003 7872 7742 7612 7484
7356 7230 7104 6979 6856 6733 6611 6491 6371 6252 6134 6018 5902 5787 5673 5561
5449 5339 5229 5120 5013 4906 4801 4697 4593 4491 4390 4290 4191 4093 3996 3900
3806 3712 3620 3528 3438 3349 3261 3174 3088 3003 2919 2837 2756 2675 2596 2518
2442 2366 2291 2218 2146 2075 2005 1936 1869 1802 1737 1673 1610 1548 1488 1428
1370 1313 1257 1203 1149 1097 1046 996 948 900 854 809 765 722 681 641
602 564 527 492 458 425 393 363 334 305 279 253 229 206 184 163
144 125 108 93 78 65 53 42 32 24 17 11 7 3 1 0
0 2 5 9 14 20 28 37 47 59 71 85 100 117 134 153
173 195 217 241 266 292 319 348 378 409 441 475 510 545 583 621
661 701 744 787 831 877 924 972 1021 1071 1123 1176 1230 1285 1342 1399
1458 1518 1579 1641 1705 1769 1835 1902 1970 2040 2110 2182 2255 2329 2404 2480
2557 2636 2715 2796 2878 2961 3045 3131 3217 3305 3393 3483 3574 3666 3759 3853
3948 4044 4142 4240 4340 4440 4542 4645 4749 4854 4960 5067 5175 5284 5394 5505
5617 5730 5844 5960 6076 6193 6311 6431 6551 6672 6794 6917 7042 7167 7293 7420
7548 7677 7807 7938 8069 8202 8336 8470 8606 8742 8880 9018 9157 9297 9438 9580
9722 9866 10010 10155 10301 10448 10596 10745 10894 11044 11196 11347 11500 11654 11808 11963
12119 12276 12433 12591 12750 12910 13070 13232 13393 13556 13720 13884 14048 14214 14380 14547
14715 14883 15052 15222 15392 15563 15735 15907 16080 16253 16427 16602 16777 16953 17130 17307
17485 17663 17842 18022 18202 18382 18563 18745 18927 19110 19293 19477 19661 19845 20031 20216
20402 20589 20776 20964 21152 21340 21529 21718 21908 22098 22288 22479 22671 22862 23054 23247
23439 23632 23826 24020 24214 24408 24603 24798 24993 25189 25385 25581 25778 25974 26171 26369
26566 26764 26962 27160 27358 27557 27756 27955 28154 28353 28553 28753 28952 29152 29352 29553
29753 29953 30154 30355 30555 30756 30957 31158 31359 31560 31761 31963 32164 32365 32566 32767)

# Gets a 16-bit angle (90° is 16384, 180° is 32768, 360° is 65536)
# Returns a value between -32768 and 32767
sin() {
    local angle=$1
    ((angle=angle*1024/65536))
    angle=$(euclidean_mod $angle 1024)

    echo $((${sine_table[$angle]}-32768))
}

# works like sin except im lazy
cos() {
    local angle=$1
    echo $(sin $((angle+16384)))
}

# i'm not implementing tan since i won't be using it anyway and i don't wanna think about how i could implement infinity

# Point transformation

# Translates a 3D point with a 3D vector.
# Usage: translate [point] [vector]
translate() {
    # Origin point
    local ox=$1
    local oy=$2
    local oz=$3
    # Translate vector
    local tx=$4
    local ty=$5
    local tz=$6

    echo $((ox+tx)) $((oy+ty)) $((oz+tz))
}

# Rotates a 2D point with an angle.
# Usage: rotate2D [point] [angle]
rotate2D() {
    local ox=$1
    local oy=$2
    local angle=$3

    # debug "angle $angle;"
    if [ ! -n "$angle" ] || [ "$angle" -eq 0 ]; then
        echo $ox $oy
        return
    fi

    local s=$(sin $angle)
    local c=$(cos $angle)
    local nx=$(( ((c*ox)+(s*oy))/32767 ))
    local ny=$(( ((c*oy)-(s*ox))/32767 ))

    echo $nx $ny
}

# Rotates a 3D point with an angle going in the X axis.
# Usage: rotateX [point] [angle]
rotateX() {
    local x=$1
    local y=$2
    local z=$3
    local angle=$4

    local o=($(rotate2D $y $z $angle))

    echo $x "${o[0]}" "${o[1]}"
}

# Rotates a 3D point with an angle going in the Y axis.
# Usage: rotateY [point] [angle]
rotateY() {
    local x=$1
    local y=$2
    local z=$3
    local angle=$4

    local o=($(rotate2D $x $z $angle))

    echo "${o[0]}" $y "${o[1]}"
}

# Rotates a 3D point with an angle going in the Z axis.
# Usage: rotateZ [point] [angle]
rotateZ() {
    local x=$1
    local y=$2
    local z=$3
    local angle=$4

    local o=($(rotate2D $x $y $angle))

    echo "${o[0]}" "${o[1]}" $z
}

# Rotates a 3D point with three angles for the X, Y, and Z axes respectively.
# Usage: rotate [point] [angleX] [angleY] [angleZ]
rotate() {
    local px=$1
    local py=$2
    local pz=$3
    local ax=$4
    local ay=$5
    local az=$6

    # debug "r3d $ax,$ay,$az"
    rotateZ $(rotateY $(rotateX $px $py $pz $ax) $ay) $az
}

# Object transformation
# These functions only transforms the last object, and takes a triangle count of the object that has been last added.
# Here are the triangle counts for every object:
# Simple triangle: 1
# Simple quadrilateral: 2
# Any type of panes: 2
# Cube: 12
# Tetrahedron: 4
# Pyramid: 6

# Translates the last object with a 3D vector.
# Usage: translate_object [triangle_count] [vector]
translate_object() {
    local tricount=$1
    local tx=$2
    local ty=$3
    local tz=$4

    local len=${#triangle_x[@]}

    for ((i = len-tricount*3; i < len; i++)); do
        local ox=${triangle_x[$i]}
        local oy=${triangle_y[$i]}
        local oz=${triangle_z[$i]}

        local np=($(translate $ox $oy $oz $tx $ty $tz))

        triangle_x[$i]=${np[0]}
        triangle_y[$i]=${np[1]}
        triangle_z[$i]=${np[2]}
    done
}

# Rotates the last object with an angle going in the X axis.
# Usage: rotateX_object [triangle_count] [angle]
rotateX_object() {
    local tricount=$1
    local angle=$2

    local len=${#triangle_x[@]}

    for ((i = len-tricount*3; i < len; i++)); do
        local ox=${triangle_x[$i]}
        local oy=${triangle_y[$i]}
        local oz=${triangle_z[$i]}

        local np=($(rotateX $ox $oy $oz $angle))

        triangle_x[$i]=${np[0]}
        triangle_y[$i]=${np[1]}
        triangle_z[$i]=${np[2]}
    done
}

# Rotates the last object with an angle going in the Y axis.
# Usage: rotateY_object [triangle_count] [angle]
rotateY_object() {
    local tricount=$1
    local angle=$2

    local len=${#triangle_x[@]}

    for ((i = len-tricount*3; i < len; i++)); do
        local ox=${triangle_x[$i]}
        local oy=${triangle_y[$i]}
        local oz=${triangle_z[$i]}

        local np=($(rotateY $ox $oy $oz $angle))

        triangle_x[$i]=${np[0]}
        triangle_y[$i]=${np[1]}
        triangle_z[$i]=${np[2]}
    done
}

# Rotates the last object with an angle going in the Z axis.
# Usage: rotateZ_object [triangle_count] [angle]
rotateZ_object() {
    local tricount=$1
    local angle=$2

    local len=${#triangle_x[@]}

    for ((i = len-tricount*3; i < len; i++)); do
        local ox=${triangle_x[$i]}
        local oy=${triangle_y[$i]}
        local oz=${triangle_z[$i]}

        local np=($(rotateZ $ox $oy $oz $angle))

        triangle_x[$i]=${np[0]}
        triangle_y[$i]=${np[1]}
        triangle_z[$i]=${np[2]}
    done
}

# Rotates the last object with three angles for the X, Y, and Z axes respectively.
# Usage: rotate_object [triangle_count] [angleX] [angleY] [angleZ]
rotate_object() {
    local tricount=$1
    local ax=$2
    local ay=$3
    local az=$4

    local len=${#triangle_x[@]}

    for ((i = len-tricount*3; i < len; i++)); do
        local ox=${triangle_x[$i]}
        local oy=${triangle_y[$i]}
        local oz=${triangle_z[$i]}

        local np=($(rotate $ox $oy $oz $ax $ay $az))

        triangle_x[$i]=${np[0]}
        triangle_y[$i]=${np[1]}
        triangle_z[$i]=${np[2]}
    done
}

# Scene transformation

# Translates the entire scene with a 3D vector.
# Usage: translate_scene [vector]
translate_scene() {
    local tx=$1
    local ty=$2
    local tz=$3

    debug "translating scene (vector: $tx,$ty,$tz)"

    local len=${#triangle_x[@]}

    for ((i = 0; i < len; i++)); do
        local ox=${triangle_x[$i]}
        local oy=${triangle_y[$i]}
        local oz=${triangle_z[$i]}

        local np=($(translate $ox $oy $oz $tx $ty $tz))

        triangle_x[$i]=${np[0]}
        triangle_y[$i]=${np[1]}
        triangle_z[$i]=${np[2]}
    done
}

# Rotates the entire scene with an angle going in the X axis.
# Usage: rotateX_scene [angle]
rotateX_scene() {
    local angle=$1

    debug "rotating scene (vector: $angle,0,0)"

    local len=${#triangle_x[@]}

    for ((i = 0; i < len; i++)); do
        local ox=${triangle_x[$i]}
        local oy=${triangle_y[$i]}
        local oz=${triangle_z[$i]}

        local np=($(rotateX $ox $oy $oz $angle))

        triangle_x[$i]=${np[0]}
        triangle_y[$i]=${np[1]}
        triangle_z[$i]=${np[2]}
    done
}

# Rotates the entire scene with an angle going in the Y axis.
# Usage: rotateY_scene [angle]
rotateY_scene() {
    local angle=$1

    debug "rotating scene (vector: 0,$angle,0)"

    local len=${#triangle_x[@]}

    for ((i = 0; i < len; i++)); do
        local ox=${triangle_x[$i]}
        local oy=${triangle_y[$i]}
        local oz=${triangle_z[$i]}

        local np=($(rotateY $ox $oy $oz $angle))

        triangle_x[$i]=${np[0]}
        triangle_y[$i]=${np[1]}
        triangle_z[$i]=${np[2]}
    done
}

# Rotates the entire scene with an angle going in the Z axis.
# Usage: rotateZ_scene [angle]
rotateZ_scene() {
    local angle=$1

    debug "rotating scene (vector: 0,0,$angle)"

    local len=${#triangle_x[@]}

    for ((i = 0; i < len; i++)); do
        local ox=${triangle_x[$i]}
        local oy=${triangle_y[$i]}
        local oz=${triangle_z[$i]}

        local np=($(rotateZ $ox $oy $oz $angle))

        triangle_x[$i]=${np[0]}
        triangle_y[$i]=${np[1]}
        triangle_z[$i]=${np[2]}
    done
}

# Rotates the entire scene with three angles for the X, Y, and Z axes respectively.
# Usage: rotateZ_scene [angleX] [angleY] [angleZ]
rotate_scene() {
    local ax=$1
    local ay=$2
    local az=$3

    debug "rotating scene (vector: $ax,$ay,$az)"

    local len=${#triangle_x[@]}

    for ((i = 0; i < len; i++)); do
        local ox=${triangle_x[$i]}
        local oy=${triangle_y[$i]}
        local oz=${triangle_z[$i]}

        local np=($(rotate $ox $oy $oz $ax $ay $az))

        triangle_x[$i]=${np[0]}
        triangle_y[$i]=${np[1]}
        triangle_z[$i]=${np[2]}
    done
}

# Complex objects

# Makes a horizontal pane across the X and Z axis from a center point and one color.
# Usage: add_horizontal_pane [width] [height] [center_point] [color]
add_horizontal_pane() {
    local width=$1  # X axis
    local height=$2 # Z axis
    local centerX=$3
    local centerY=$4
    local centerZ=$5
    local r=$6
    local g=$7
    local b=$8

    local halfwidth=$((width/2))
    local halfheight=$((height/2))

    add_quad_solid \
        $(translate -$halfwidth 0 -$halfheight $centerX $centerY $centerZ) \
        $(translate  $halfwidth 0 -$halfheight $centerX $centerY $centerZ) \
        $(translate  $halfwidth 0  $halfheight $centerX $centerY $centerZ) \
        $(translate -$halfwidth 0  $halfheight $centerX $centerY $centerZ) \
        $r $g $b
}

# Makes a vertical pane across the X and Y axis from a center point and one color.
# Usage: add_vertical_x_pane [width] [height] [center_point] [color]
add_vertical_x_pane() {
    local width=$1  # X axis
    local height=$2 # Y axis
    local centerX=$3
    local centerY=$4
    local centerZ=$5
    local r=$6
    local g=$7
    local b=$8

    local halfwidth=$((width/2))
    local halfheight=$((height/2))

    add_quad_solid \
        $((centerX-halfwidth)) $((centerY-halfheight)) $centerZ \
        $((centerX+halfwidth)) $((centerY-halfheight)) $centerZ \
        $((centerX+halfwidth)) $((centerY+halfheight)) $centerZ \
        $((centerX-halfwidth)) $((centerY+halfheight)) $centerZ \
        $r $g $b
}

# Makes a vertical pane across the Y and Z axis from a center point and one color.
# Usage: add_vertical_z_pane [width] [height] [center_point] [color]
add_vertical_z_pane() {
    local width=$1  # Z axis
    local height=$2 # Y axis
    local centerX=$3
    local centerY=$4
    local centerZ=$5
    local r=$6
    local g=$7
    local b=$8

    local halfwidth=$((width/2))
    local halfheight=$((height/2))

    add_quad_solid \
        $centerX $((centerY-halfheight)) $((centerZ-halfwidth)) \
        $centerX $((centerY-halfheight)) $((centerZ+halfwidth)) \
        $centerX $((centerY+halfheight)) $((centerZ+halfwidth)) \
        $centerX $((centerY+halfheight)) $((centerZ-halfwidth)) \
        $r $g $b
}

# Makes a rotatable pane from a center point and one color.
# Usage: add_rotatable_pane [width] [height] [center_point] [angleX] [angleY] [angleZ] [color]
add_rotatable_pane() {
    local width=$1  # X axis
    local height=$2 # Z axis
    local centerX=$3
    local centerY=$4
    local centerZ=$5
    local angle1=$6
    local angle2=$7
    local angle3=$8
    local r=$9
    local g=${10}
    local b=${11}

    local halfwidth=$((width/2))
    local halfheight=$((height/2))

    add_quad_solid \
        $(translate $(rotate -$halfwidth 0 -$halfheight $angle1 $angle2 $angle3) $centerX $centerY $centerZ) \
        $(translate $(rotate $halfwidth 0 -$halfheight $angle1 $angle2 $angle3) $centerX $centerY $centerZ) \
        $(translate $(rotate $halfwidth 0 $halfheight $angle1 $angle2 $angle3) $centerX $centerY $centerZ) \
        $(translate $(rotate -$halfwidth 0 $halfheight $angle1 $angle2 $angle3) $centerX $centerY $centerZ) \
        $r $g $b
}

# Makes a horizontal pane across the X and Z axis from a center point and four colors.
# The four colors correspond to the top left point, the top right point, the bottom left point, and the bottom right point respectively.
# Usage: add_horizontal_pane_gradient [width] [height] [center_point] [color1] [color2] [color3] [color4]
add_horizontal_pane_gradient() {
    local width=$1  # X axis
    local height=$2 # Z axis
    local centerX=$3
    local centerY=$4
    local centerZ=$5
    local r1=$6
    local g1=$7
    local b1=$8
    local r2=$9
    local g2=${10}
    local b2=${11}
    local r3=${12}
    local g3=${13}
    local b3=${14}
    local r4=${15}
    local g4=${16}
    local b4=${17}

    local halfwidth=$((width/2))
    local halfheight=$((height/2))

    add_quad_gradient \
        $(translate -$halfwidth 0 -$halfheight $centerX $centerY $centerZ) \
        $(translate  $halfwidth 0 -$halfheight $centerX $centerY $centerZ) \
        $(translate  $halfwidth 0  $halfheight $centerX $centerY $centerZ) \
        $(translate -$halfwidth 0  $halfheight $centerX $centerY $centerZ) \
        $r1 $g1 $b1 \
        $r2 $g2 $b2 \
        $r4 $g4 $b4 \
        $r3 $g3 $b3
}

# Makes a vertical pane across the X and Y axis from a center point and four colors.
# The four colors correspond to the top left point, the top right point, the bottom left point, and the bottom right point respectively.
# Usage: add_vertical_x_pane_gradient [width] [height] [center_point] [color1] [color2] [color3] [color4]
add_vertical_x_pane_gradient() {
    local width=$1  # X axis
    local height=$2 # Y axis
    local centerX=$3
    local centerY=$4
    local centerZ=$5
    local r1=$6
    local g1=$7
    local b1=$8
    local r2=$9
    local g2=${10}
    local b2=${11}
    local r3=${12}
    local g3=${13}
    local b3=${14}
    local r4=${15}
    local g4=${16}
    local b4=${17}

    local halfwidth=$((width/2))
    local halfheight=$((height/2))

    add_quad_gradient \
        $((centerX-halfwidth)) $((centerY-halfheight)) $centerZ \
        $((centerX+halfwidth)) $((centerY-halfheight)) $centerZ \
        $((centerX+halfwidth)) $((centerY+halfheight)) $centerZ \
        $((centerX-halfwidth)) $((centerY+halfheight)) $centerZ \
        $r1 $g1 $b1 \
        $r2 $g2 $b2 \
        $r4 $g4 $b4 \
        $r3 $g3 $b3
}

# Makes a vertical pane across the Y and Z axis from a center point and four colors.
# The four colors correspond to the top left point, the top right point, the bottom left point, and the bottom right point respectively.
# Usage: add_vertical_z_pane_gradient [width] [height] [center_point] [color1] [color2] [color3] [color4]
add_vertical_z_pane_gradient() {
    local width=$1  # Z axis
    local height=$2 # Y axis
    local centerX=$3
    local centerY=$4
    local centerZ=$5
    local r1=$6
    local g1=$7
    local b1=$8
    local r2=$9
    local g2=${10}
    local b2=${11}
    local r3=${12}
    local g3=${13}
    local b3=${14}
    local r4=${15}
    local g4=${16}
    local b4=${17}

    local halfwidth=$((width/2))
    local halfheight=$((height/2))

    add_quad_gradient \
        $centerX $((centerY-halfheight)) $((centerZ-halfwidth)) \
        $centerX $((centerY-halfheight)) $((centerZ+halfwidth)) \
        $centerX $((centerY+halfheight)) $((centerZ+halfwidth)) \
        $centerX $((centerY+halfheight)) $((centerZ-halfwidth)) \
        $r1 $g1 $b1 \
        $r2 $g2 $b2 \
        $r4 $g4 $b4 \
        $r3 $g3 $b3
}

# Makes a rotatable pane from a center point and four colors.
# The four colors correspond to the top left point, the top right point, the bottom left point, and the bottom right point respectively.
# Usage: add_rotatable_pane_gradient [width] [height] [center_point] [angleX] [angleY] [angleZ] [color1] [color2] [color3] [color4]
add_rotatable_pane_gradient() {
    local width=$1  # X axis
    local height=$2 # Z axis
    local centerX=$3
    local centerY=$4
    local centerZ=$5
    local angle1=$6
    local angle2=$7
    local angle3=$8
    local r1=$9
    local g1=${10}
    local b1=${11}
    local r2=${12}
    local g2=${13}
    local b2=${14}
    local r3=${15}
    local g3=${16}
    local b3=${17}
    local r4=${18}
    local g4=${19}
    local b4=${20}

    local halfwidth=$((width/2))
    local halfheight=$((height/2))

    add_quad_gradient \
        $(translate $(rotate -$halfwidth 0 -$halfheight $angle1 $angle2 $angle3) $centerX $centerY $centerZ) \
        $(translate $(rotate $halfwidth 0 -$halfheight $angle1 $angle2 $angle3) $centerX $centerY $centerZ) \
        $(translate $(rotate $halfwidth 0 $halfheight $angle1 $angle2 $angle3) $centerX $centerY $centerZ) \
        $(translate $(rotate -$halfwidth 0 $halfheight $angle1 $angle2 $angle3) $centerX $centerY $centerZ) \
        $r1 $g1 $b1 \
        $r2 $g2 $b2 \
        $r4 $g4 $b4 \
        $r3 $g3 $b3
}

# Makes a cube with different face colors that can be rotated around.
# Usage: add_cube [center_point] [size] [angleX] [angleY] [angleZ] [color1] [color2] [color3] [color4] [color5] [color6]
add_cube() {
    local x=$1
    local y=$2
    local z=$3
    local size=$4
    local angle1=$5
    local angle2=$6
    local angle3=$7
    shift 7
    local r=()
    local g=()
    local b=()
    for ((i = 0; i < 6; i++)); do
        r+=($1)
        g+=($2)
        b+=($3)
        shift 3
    done

    # Bottom face
    add_quad_solid \
        $(translate $(rotate  $size -$size  $size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate -$size -$size  $size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate -$size -$size -$size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate  $size -$size -$size $angle1 $angle2 $angle3) $x $y $z) \
        ${r[0]} ${g[0]} ${b[0]}

    # Positive X axis face
    add_quad_solid \
        $(translate $(rotate  $size  $size  $size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate -$size  $size  $size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate -$size -$size  $size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate  $size -$size  $size $angle1 $angle2 $angle3) $x $y $z) \
        ${r[1]} ${g[1]} ${b[1]}

    # Positive Z axis face
    add_quad_solid \
        $(translate $(rotate  $size  $size  $size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate  $size  $size -$size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate  $size -$size -$size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate  $size -$size  $size $angle1 $angle2 $angle3) $x $y $z) \
        ${r[2]} ${g[2]} ${b[2]}

    # Negative X axis face
    add_quad_solid \
        $(translate $(rotate  $size  $size -$size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate -$size  $size -$size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate -$size -$size -$size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate  $size -$size -$size $angle1 $angle2 $angle3) $x $y $z) \
        ${r[3]} ${g[3]} ${b[3]}

    # Negative Z axis face
    add_quad_solid \
        $(translate $(rotate -$size  $size  $size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate -$size  $size -$size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate -$size -$size -$size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate -$size -$size  $size $angle1 $angle2 $angle3) $x $y $z) \
        ${r[4]} ${g[4]} ${b[4]}

    # Top face
    add_quad_solid \
        $(translate $(rotate  $size  $size  $size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate -$size  $size  $size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate -$size  $size -$size $angle1 $angle2 $angle3) $x $y $z) \
        $(translate $(rotate  $size  $size -$size $angle1 $angle2 $angle3) $x $y $z) \
        ${r[5]} ${g[5]} ${b[5]}
}

# Makes a cube with the same face colors that can be rotated around.
# Usage: add_cube_solid [center_point] [size] [angleX] [angleY] [angleZ] [color]
add_cube_solid() {
    local x=$1
    local y=$2
    local z=$3
    local size=$4
    local angle1=$5
    local angle2=$6
    local angle3=$7
    local r=$8
    local g=$9
    local b=${10}

    add_cube \
        $x $y $z $size $angle1 $angle2 $angle3 \
        $r $g $b \
        $r $g $b \
        $r $g $b \
        $r $g $b \
        $r $g $b \
        $r $g $b
}

# Makes a tetrahedron with different face colors that can be rotated around.
# The first color corresponds to the bottom face of the tetrahedron.
# Usage: add_tetrahedron [center_point] [width] [height] [angleX] [angleY] [angleZ] [color1] [color2] [color3] [color4]
add_tetrahedron() {
    local x=$1
    local y=$2
    local z=$3
    local width=$4
    local height=$5
    local angle1=$6
    local angle2=$7
    local angle3=$8
    shift 8
    local r=()
    local g=()
    local b=()
    for ((i = 0; i < 4; i++)); do
        r+=($1)
        g+=($2)
        b+=($3)
        shift 3
    done

    # Define points
    local bp1="$(translate $(rotate -$width -$height -$width $angle1 $angle2 $angle3) $x $y $z)" # Bottom point #1
    local bp2="$(translate $(rotate  $width -$height -$width $angle1 $angle2 $angle3) $x $y $z)" # Bottom point #2
    local bp3="$(translate $(rotate  0      -$height  $width $angle1 $angle2 $angle3) $x $y $z)" # Bottom point #3
    local tp="$(translate $(rotate   0       $height  0      $angle1 $angle2 $angle3) $x $y $z)" # Top point

    # Add triangles
    add_triangle_solid $bp1 $bp2 $bp3 ${r[0]} ${g[0]} ${b[0]} # Bottom face
    add_triangle_solid $bp1 $tp $bp2 ${r[1]} ${g[1]} ${b[1]}  # Top face #1
    add_triangle_solid $bp2 $tp $bp3 ${r[2]} ${g[2]} ${b[2]}  # Top face #2
    add_triangle_solid $bp3 $tp $bp1 ${r[3]} ${g[3]} ${b[3]}  # Top face #3
}

# Makes a tetrahedron with the same face colors that can be rotated around.
# Usage: add_tetrahedron_solid [center_point] [width] [height] [angleX] [angleY] [angleZ] [color]
add_tetrahedron_solid() {
    local x=$1
    local y=$2
    local z=$3
    local width=$4
    local height=$5
    local angle1=$6
    local angle2=$7
    local angle3=$8
    local r=$9
    local g=${10}
    local b=${11}

    add_tetrahedron \
        $x $y $z \
        $width $height \
        $angle1 $angle2 $angle3 \
        $r $g $b \
        $r $g $b \
        $r $g $b \
        $r $g $b
}

# Makes a (pentagonal) pyramid with different face colors that can be rotated around.
# The first color corresponds to the bottom face of the pyramid.
# Usage: add_pyramid [center_point] [width] [height] [angleX] [angleY] [angleZ] [color1] [color2] [color3] [color4] [color5]
add_pyramid() {
    local x=$1
    local y=$2
    local z=$3
    local width=$4
    local height=$5
    local angle1=$6
    local angle2=$7
    local angle3=$8
    shift 8
    local r=()
    local g=()
    local b=()
    for ((i = 0; i < 5; i++)); do
        r+=($1)
        g+=($2)
        b+=($3)
        shift 3
    done

    # Define points
    local bp1="$(translate $(rotate -$width -$height -$width $angle1 $angle2 $angle3) $x $y $z)" # Bottom point #1
    local bp2="$(translate $(rotate  $width -$height -$width $angle1 $angle2 $angle3) $x $y $z)" # Bottom point #2
    local bp3="$(translate $(rotate  $width -$height  $width $angle1 $angle2 $angle3) $x $y $z)" # Bottom point #3
    local bp4="$(translate $(rotate -$width -$height  $width $angle1 $angle2 $angle3) $x $y $z)" # Bottom point #4
    local tp="$(translate $(rotate   0       $height  0      $angle1 $angle2 $angle3) $x $y $z)" # Top point

    # Add triangles
    add_quad_solid $bp1 $bp2 $bp3 $bp4 ${r[0]} ${g[0]} ${b[0]} # Bottom face
    add_triangle_solid $bp1 $tp $bp2 ${r[1]} ${g[1]} ${b[1]}  # Top face #1
    add_triangle_solid $bp2 $tp $bp3 ${r[2]} ${g[2]} ${b[2]}  # Top face #2
    add_triangle_solid $bp3 $tp $bp4 ${r[3]} ${g[3]} ${b[3]}  # Top face #3
    add_triangle_solid $bp4 $tp $bp1 ${r[4]} ${g[4]} ${b[4]}  # Top face #4
}

# Makes a (pentagonal) pyramid with the same face colors that can be rotated around.
# Usage: add_pyramid_solid [center_point] [width] [height] [angleX] [angleY] [angleZ] [color]
add_pyramid_solid() {
    local x=$1
    local y=$2
    local z=$3
    local width=$4
    local height=$5
    local angle1=$6
    local angle2=$7
    local angle3=$8
    local r=$9
    local g=${10}
    local b=${11}

    add_pyramid \
        $x $y $z \
        $width $height \
        $angle1 $angle2 $angle3 \
        $r $g $b \
        $r $g $b \
        $r $g $b \
        $r $g $b \
        $r $g $b
}

#!/usr/bin/env bash

. ./lib/buffer || exit
. ./lib/triangles || exit

# World data
# Bash doesn't use floats, so positions (including the Z axis!) work as fixed point
# Triangles get drawn to the buffer one by one, the last triangle gets prioritized
# The different color arrays are for doing gradients with different points, which aren't used

# In this example here, we see two triangles intersecting each other.
# When using -f, the triangles no longer intersect, but the triangles render much quicker.
triangle_x=(60000 -40000 60000 -65535 65535 40000)
triangle_y=(60000 60000 -40000 -65535 -65535 40000)
triangle_z=(65535 65535 65535 98302 98302 45000)
triangle_color1=(0 255 0 0 255 255)
triangle_color2=(0 255 0 0 255 255)
triangle_color3=(0 255 0 0 255 255)
triangle_count=2
triangle_unit=65535
triangle_fast_depth=0
triangle_debug_rgb=0
triangle_debug_zbuf=0

background_r=0
background_g=0
background_b=0

debug() {
	echo '[debug]' "$@" >&2
}

fatal() {
	echo '[fatal]' "$@" >&2
	exit 1
}

make-bmp() {
	local width=$1
	local height=$2

	init_buffer "$width" "$height"
	init_zbuffer
	draw_triangles

    export_buffer
}

main() {
	# I'm sorry, but this is just ridiculously slow
	local width=64
	local height=64
	local output=out.bmp

	local OPTIND OPTARG opt
	while getopts 'w:h:o:fdz' opt; do
		case "$opt" in
			w) width=$OPTARG;;
			h) height=$OPTARG;;
			o) output=$OPTARG;;
			f) triangle_fast_depth=1;;
			d) triangle_debug_rgb=1;;
			z) triangle_debug_zbuf=1;;
			*) fatal 'bad option';;
		esac
	done

	make-bmp "$width" "$height" > "$output" || \
	    fatal "failed to generate $output"

	echo "generated ${width}x$height image: $output"
}

main "$@"
